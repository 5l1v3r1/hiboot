package rsa

import (
	"os"
	"testing"
)

func TestEncryptDecryptLongString(t *testing.T) {
	var priveteKey = []byte(`
-----BEGIN PRIVATE KEY-----
MIIEuwIBADALBgkqhkiG9w0BAQEEggSnMIIEowIBAAKCAQEArn3nYQSwTsm9hjDf
7LiM6yM2ToFh8Guxxsld6FPQ2j7CBei4scO6YjSS4TvMeeufznQS9bzWvekYdirT
77eFV5MjfXpiylHFHNS5gcZihThvPJrOVagyyAV11Abi+EY9/1aRrTGF6JjX+jqF
2/jwhwGkmhefvoxHRCAjkemi9QO8omxh/AU4c3EjyWMVjaCgngtjvkiBeMU9Wsag
ZiYnEez01/fP4pq/n1pWBc7QtmH20Z5NOj9LPC2+8oYGpke9lG/IdfGuqicJJNC/
0vZEJoK4D3+BiokvR20OC9c43ffznfbhGV9lblyOS30kIPcyAlknJrWVkKcNIhIL
PMrh4QIDAQABAoIBADCgtdK708ahQkgbZsw5wkvlTEUkmX6/BJQ5mgodEZ9AziGH
cbFYsqCbtjM+zwVLPQX0IzSIo+/Y/hAwb0/m/Soiv0lAyjdIAn6+adRYzSwDRjzF
h6snbL+BhgzIvogiSzTVk1OI8aCYt9fsZ1GeVqnJM24eF06rGVFLA56uVdOh+Sl/
YefEnAYHTsbsF3hEyk2WsnqlgxqRIGiK5TCpp1uz8UZvt73Qkc5L3gVTftkuMFk8
NpLlQI/FwME0+K//lgFBpvBW6cvoe6TwsL67q6yxYQ4Nma22lx2wUeSuaHjCmRE0
IbzDpc2IlIqr8T0WOTetaiUcSfz+37Z4ZqB+4gECgYEA1R/nRXh8UcPiXYQNeJOG
I25rqYPOMMpRHsWxFYkRrXOv9p6kLXpZ4cB15DJoMZrETVVU0BHkvkWZ1aZatSO4
OuyMc4PIYRdQoM/LH+jeLuTSY/yu1b6jrYxxOYQSPxcqBCLXnRzOl6CFxybQtMAx
gwXlPaZfH8o5cvKoLu10nMkCgYEA0Zhg2DyTRr81rGSUUXNCfAgG45Yz7VSTXOeu
E0efaGL8VaeKKBrD1/GKATo0qetT+BlSWZ+4zmDnVLxVkOhfqFIcZ6Tug+sqoDXm
e+2CIJOzDRnl+uqBTd1qn6VBmHTneemAG35z1mv4Khx7J1/FQj8UPKsxzh43YD/l
P2xNYFkCgYEAlc8GLxQBNyxdCuUO3wm7yV4NuatXnX4pRVsrHfsqfOUL9GwQ9ZLC
aWhytgQkr3GduMpZgqSBSKn992sm6ZsBHhI2q+AfUvgjidZmbriurQHVTclJUB/g
R9anpAlNFiH/O8cODnc4VObWAmYrYFKUuwfC2vH+fYcVmNIvHEV3qdkCgYByMtAx
gW/NUElyUKrvZhmHcuguAJzyZu6T5DfYkWGtgqFyGgMQruSeOCC1Yn1nR61MtJ9F
7dzHtczVQnhsp+/WykZnwlmizvM+r5+RTmtkTJV2QfIosLUbM9Twfx4qbyfgKPWA
BXogDlv8td/0KB5WZgAkvjI42AXcD3RdBilyoQKBgBOVhHhVYMdKY7fibpXdL/W8
7+Boy8mRuRxY06Df6d1R2LuiLFCpKVknP+oWx90dFiA0cXKNw57cvacImZxt3V1+
+beiFhbYGVnSkvDOjsFF3zZfK00df+4mT211DSYegqk/iYUBA+Z5QBxVWO+vApKX
wvloIFUua5y1py6nksjU
-----END PRIVATE KEY-----
`)

	var publicKey = []byte(`
-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArn3nYQSwTsm9hjDf7LiM
6yM2ToFh8Guxxsld6FPQ2j7CBei4scO6YjSS4TvMeeufznQS9bzWvekYdirT77eF
V5MjfXpiylHFHNS5gcZihThvPJrOVagyyAV11Abi+EY9/1aRrTGF6JjX+jqF2/jw
hwGkmhefvoxHRCAjkemi9QO8omxh/AU4c3EjyWMVjaCgngtjvkiBeMU9WsagZiYn
Eez01/fP4pq/n1pWBc7QtmH20Z5NOj9LPC2+8oYGpke9lG/IdfGuqicJJNC/0vZE
JoK4D3+BiokvR20OC9c43ffznfbhGV9lblyOS30kIPcyAlknJrWVkKcNIhILPMrh
4QIDAQAB
-----END PUBLIC KEY-----
`)

	random2048Str := "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"
	encryptResult, err := EncryptLongString(random2048Str, publicKey)
	if err != nil {
		t.Fatal(err)
	}
	decryptResult, err := DecryptLongString(encryptResult, publicKey, priveteKey)
	if err != nil {
		t.Fatal(err)
	}
	if decryptResult != random2048Str {
		t.Fatal("They should be equal")
	}
}

func TestGenKeys(t *testing.T) {
	err := GenKeys(os.Stdout, os.Stdout, 2048)
	if err != nil {
		t.Fatal(err)
	}
}
